Interim report 6.3.2023 - Project start

Project has been initialized as an sbt project. Scalafmt for formatting, Wartremover for linting have been configured.
Necessary libraries, such as ScalaFX, have been installed. 

When it comes to starting the project code, I first created three packages: Logic, UI and Util, each having code related to
their name. Util will have some helper functions and classes which don't land to neither Logic nor UI. Then I created a
several files and classe. Bullet, Enemy, Game, GameObject, Gameplay, Map and Tower in Logic. GameplayUI, MainMenuUI,
MainUI and SettingsUI in UI. In addition, I created resources-folder and added a couple items there. This folder will have all
the images and sprites. 

Then, I started with UI, MainUI in particular. I created three scenes, and a logic that they can be switched between. Main menu
has two buttons that lead to either GameplayUI or SettingsUI. SettingsUI has a button that leads back to MainUI. Most of the work
has been done with Gameplay UI. It has logic that when given a Map-class, it can create a grid of blocks that represent the map.
Also sidebar has been created and it shows a couple tower buttons already. 

In the Logic-package I have been mostly working with Map-class. It has now initializeMap-method, which can read a map from a file
and create a 2D Array of Tile-(sub)classes. Util has FileHandler-class which is utilized in the abovementioned. Enemy-class implemented
and its getHit-function. No use for these yet.

No functionality tested yet. Trying to get more grasp on the project before starting to do the tests, as the class structure
may still change radically.

There was a difficult problem when working with ScalaFX-library and lazy variables - stage and lazy vals weren't working that well.
In the end there was an easy solution - set stage's scene after defining lazy values seemed to work.

Workload has been about 15 hours.

In my opinion, I am in a decent phase of the project. I have implemented the Gameplay-UI quite well and it's easy to scale it in the 
future. Testing starts during the next two weeks when the structure of the project is clearer. 

---------------------------------------------------------------------------------------------------------------------------------------
Interim report 20.3.2023

Testing has been started by initializing ScalaTest configurations with sbt and necessary folders have been created. System tests will
be in src/test/scala/System and unit tests in src/test/scala/Unit. Currently, only tests for the Map-class in Logic-package have been
made. These tests are quite comprehensive and done diligently.

Animations and movement of enemies has been finished, almost. Now, an enemy can be spawn to the start of the path, and it will appear 
outside the screen smoothly. There are different enemy images used, but they are still basically the same enemies with different healths
and speed. But because the basic algorithms have now been implemented, such as creating the pathQueue for Map-class (a queue of the path
 tiles) and enemies movement along this path, adding additional functionality will be quite easy. 

Wave-level-creation is now also automated with a text file. User can create a text file, whose rows are different waves and a particular
letter in a row indicates a particular enemy. So it's very straightforward to create new levels and waves with this automation. 
Documentation regarding to the exact structure of these wavedata-files will be written. The wavesdatas are stores in resources/WaveData.
Also, a new wave will be automatically started after the previous one has completely ended (all the enemies of the previous wave are not
in the screen anymore), and changing periods/breaks regarding to this automation is very easy. 

Currently, only reading files is implemented. This is done with the Util.FileHandler-class.

Next, let's explain some functions and algorithms written. GeneratePathQueue in the Map-class starts from the starting Path-tile, which 
is already defined in the initializeMap-function, and check all the tiles near it. If it finds a PathTile, it will be added to the queue
and we will do the same with this PathTile, and continue the same way until we reach the already-known end tile. Enemies will use this 
queue to go through the map. InitializeMap-function was already created before the first review, so we won't go through it in this report.

Another essential algorithm is the one in moveEnemy-function, in the GameplayUI-class. First, it will will calculate the difference vector
between current tile, the one the enemy is currently in, and the next tile in the map.pathQueue. Then, it calculates the distance, also 
the length of this difference vector, between the tiles (with Pythagoras). Next, the function calculates the speed vector of the enemy with
this previously calculated information. This is done by dividing difference vector's x-subvector by the distance. This is set as 
velocity x, and the same way for y-coordinates. We also multiply both with the enemy's own speed. These vx and vy now basically have the 
amount of pixels the enemy has to move to both directions, y and x directions. So, in every frame change we calculate these values for every 
enemy, and then finally, we move the enemy according to this (vx, vy)-vector. We also rotate the enemy to the direction of the 
(dx, dy)-vector, in the end. The ending isn't implemented properly yet, currently if the next tile is End-tile, we just remove the enemy from
the screen. The enemies shake a little bith when moving in the screen, this is related to rotating them. Will be fixed.

Some error handling has been implemented, especially in the case of wrongly formatted map-file. Currently, an error is thrown if the 
file is invalid (checked with different indicators, such as row amount and lengths). But nothing is done after throwing these errors,
so that would be next step. And also throwing errors in different locations as well.

I think I am doing ok progress. Now I will be progressing a bit faster with the enemy side as all the time-taking algorithms have been 
implemented. Next weeks, I will be concentrating on the tower behaviour and their shooting. And more tests now that I have started to 
do tests.
---------------------------------------------------------------------------------------------------------------------------------------
Interim report 3.4.2023

Näiden kahden viikon aikana olen ollut kiireinen, minkä vuoksi projekti ei ole edistynyt ainakaan havainnollisesti paljoa. 

Ensinnäkin, korjasin aikaisemmin esiintyneen ongelman, jossa ohjelmaa yritettiin käynnistää viallisella kartalla, 
jossa jokin pala vastustajien polkua on "yksinäisessä" kohtaa karttaa, eli se ei kosketa yhteenkään muuhun polunpalaan. 
Nyt tässä tapauksessa heitetään virhe, joka estää sovelluksen käynnistämisyrityksen (virheenkäsittelyä ei ole vielä toteutettu).

Koodin refaktorointia on myös tehty jonkin verran kahden viikon aikana. Tower-buttonit on tehty omaksi classikseen 
(joka laajentaa Buttonia) sen sijaan, että ne luotaisiin funktioilla. Lisää vakio muuttujia Constants-luokkaan.

Suurin lisäys tämän väliraportin yhteydessä lienee tooltipin lisäys towerbuttoneihin. Nyt, kun sivupalkin nappien 
päälle laittaa hiiren, ilmestyy "tooltip" hiiren viereen, johon on tällä hetkellä lisätty seuraavat tiedot: Towerin nimi, 
hinta ja kuvaus. Tähän kohtaan ei tule mitään painikkeita tooltippiin, koska tornit on tarkoitus raahata pelikentille ja 
hinta veloittaa automaattisesti. Mutta nyt kun tooltip on tehty yhteen paikkaan, on se suhteellisen helppoa lisätä myöhemmin 
jo paikalleen laitettuihin torneihin, jolloin tooltipissä tulee olemaan Upgrade- ja Sell-nappulat.

Olen myös aloittanut tutkimaan tornien raahausominaisuutta, jossa tornit viedään kartalle, ja tutkiessani olenkin kerennyt 
kokeilemaan muutamaa eri vaihtoehtoa mutta mitään en ole vielä saanut toimimaan sopivasti.

Olen edelleen ok tahdissa, koska huomisen jälkeen minulla helpottaa työmäärä helposti muilta kursseilta jolloin ehdin 
keskittää voimavarojani paljon tähän projektiin, ja seuraava kaksi viikkoa tuleekin olemaan huomattavasti intensiivisempi tämän projektin suhteen.
